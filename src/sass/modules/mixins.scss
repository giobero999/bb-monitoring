@mixin border-bottom-all($borderHeight, $borderStyle, $red) {
  border-bottom-width: $borderHeight;
  border-bottom-style: $borderStyle;
  border-bottom-color: $red;
}

@mixin img-all($imgBorderRadius, $imgBorderLeftRadius, $imgBorderRightRadius){
  border-radius: 2px;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}

@mixin box-shadow($box-shadow){
  box-shadow:$box-shadow;
}

@mixin font-header($fontStyle, $fontFamily, $fontSize){
  font-style: normal;
  font-family: $mainFont;
  font-size: $headingFontSize;
}

$susy: (
  columns: 12,
  gutters: 12/1,
  container-position:center,
  container:auto,
  math: fluid,
  output: float,
  gutter-position: inside,
);


/*media queries*/
$break-XXScreen:480px;
$break-XScreen: 578px;
$break-small: 768px;
$break-medium: 992px;
$break-large: 1400px;
$break-HDScreen: 1921px;
$break-5kScreen:2880px;


@mixin respond-to($media) {
  // @if $media == XLargeScreen{
  //   @media only screen and (min-width: $break-5kScreen - 1) { @content; }
  // }


  @if $media == HDScreen{
    @media only screen and (min-width: $break-HDScreen) { @content; }
  }

  @if $media == mediumScreen {
    @media only screen and (min-width: $break-small - 1) and (max-width: $break-medium - 1) { @content; }
  }

  @else if $media == smallScreen {
    @media only screen and (min-width: $break-XScreen + 1) and (max-width: $break-small - 1) { @content; }
  }

  @else if $media == XScreen {
      @media only screen and (max-width: $break-XScreen ) { @content; }
  }

  @else if $media == XXScreen {
      @media only screen and (max-width: $break-XXScreen ) { @content; }
  }
}
